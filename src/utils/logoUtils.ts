// ⚽ Auto-generated by scripts/rename-logos.js
// Do not edit manually — update logos in /public/images/club-logos and re-run the script.

import { getDisplayTeamName } from './teamNameUtils';

const TEAM_LOGO_MAP: Record<string, string> = {
  "AFC Bournemouth": "afc-bournemouth",
  "Arsenal FC": "arsenal-fc",
  "Arsenal": "arsenal-fc",
  "Aston Villa": "aston-villa",
  "Brentford FC": "brentford-fc",
  "Brentford": "brentford-fc",
  "Brighton & Hove Albion": "brighton-and-hove-albion",
  "Burnley FC": "burnley-fc",
  "Burnley": "burnley-fc",
  "Chelsea FC": "chelsea-fc",
  "Chelsea": "chelsea-fc",
  "Crystal Palace": "crystal-palace",
  "Everton FC": "everton-fc",
  "Everton": "everton-fc",
  "Fulham FC": "fulham-fc",
  "Fulham": "fulham-fc",
  "Leeds United": "leeds-united",
  "Liverpool FC": "liverpool-fc",
  "Liverpool": "liverpool-fc",
  "Manchester City": "manchester-city",
  "Manchester United": "manchester-united",
  "Newcastle United": "newcastle-united",
  "Nottingham Forest": "nottingham-forest",
  "Sunderland AFC": "sunderland-afc",
  "Sunderland": "sunderland-afc",
  "Tottenham Hotspur": "tottenham-hotspur",
  "West Ham United": "west-ham-united",
  "Wolverhampton Wanderers": "wolverhampton-wanderers",
  "Man Utd": "manchester-united",
  "Man United": "manchester-united",
  "Spurs": "tottenham-hotspur",
  "Man City": "manchester-city",
  "Nott'm Forest": "nottingham-forest",
  "Wolves": "wolverhampton-wanderers",
  "Brighton": "brighton-and-hove-albion",
  "Leeds": "leeds-united",
  "West Ham": "west-ham-united",
  "Bournemouth": "afc-bournemouth"
};

export interface TeamLogoResult {
  logoPath: string | null;
  fallbackInitial: string;
  fallbackName: string;
  displayName: string;
}

/**
 * Get team logo path from local assets with fallback to API badge
 */
export const getTeamLogoPath = (
  teamName: string,
  teamId?: string,
  shortName?: string,
  apiBadgeUrl?: string
): string | null => {
  // First try local logo mapping
  const slug = TEAM_LOGO_MAP[teamName] || (shortName && TEAM_LOGO_MAP[shortName]) || null;
  
  if (slug) {
    // Check if we're in development or production
    const isProduction = process.env.NODE_ENV === 'production';
    const basePath = isProduction ? '/Football-App-1.1' : '';
    
    // Point to public folder (accessible via URL)
    return `${basePath}/Images/Club%20Logos/${slug}.png`;
  }
  
  // Fallback to API badge URL if available
  return apiBadgeUrl || null;
};

/**
 * Enhanced team logo utility with display name integration
 */
export const getTeamLogo = (team: { 
  name: string; 
  shortName?: string; 
  id?: string;
  badge?: string; // From API (strHomeTeamBadge/strAwayTeamBadge)
}): TeamLogoResult => {
  const logoPath = getTeamLogoPath(team.name, team.id, team.shortName, team.badge);
  const displayName = getDisplayTeamName(team.name, team.shortName);
  
  return {
    logoPath,
    fallbackInitial: displayName.substring(0, 3).toUpperCase(),
    fallbackName: displayName,
    displayName
  };
};

/**
 * Validate if a logo URL is accessible (useful for testing API badges)
 */
export const validateLogoUrl = async (url: string): Promise<boolean> => {
  try {
    const response = await fetch(url, { method: 'HEAD' });
    return response.ok;
  } catch {
    return false;
  }
};

/**
 * Get logo with validation (for critical UI where logo must load)
 */
export const getValidatedTeamLogo = async (team: { 
  name: string; 
  shortName?: string; 
  id?: string;
  badge?: string;
}): Promise<TeamLogoResult> => {
  const result = getTeamLogo(team);
  
  // If we have a logo path, validate it
  if (result.logoPath) {
    const isValid = await validateLogoUrl(result.logoPath);
    if (!isValid) {
      result.logoPath = null;
    }
  }
  
  return result;
};

/**
 * Preload team logos for better performance
 */
export const preloadTeamLogos = (teams: Array<{ name: string; shortName?: string; badge?: string }>) => {
  teams.forEach(team => {
    const { logoPath } = getTeamLogo(team);
    if (logoPath) {
      const img = new Image();
      img.src = logoPath;
      // Silently preload - don't handle errors as fallbacks will be used
    }
  });
};

/**
 * Get competition/league logo path
 */
export const getCompetitionLogo = (
  competitionName: string,
  apiLogoUrl?: string
): string | null => {
  // Map of competition logos you might have locally
  const competitionLogos: Record<string, string> = {
    'English Premier League': 'english-premier-league',
    'Premier League': 'english-premier-league',
    'FA Cup': 'fa-cup',
    'EFL Cup': 'efl-cup',
    'Champions League': 'champions-league',
    'Europa League': 'europa-league',
  };

  const slug = competition[competitionName];
  
  if (slug) {
    const isProduction = process.env.NODE_ENV === 'production';
    const basePath = isProduction ? '/Football-App-1.1' : '';
    return `${basePath}/Images/competition/${slug}.png`;
  }

  // Fallback to API logo
  return apiLogoUrl || null;
};

/**
 * Enhanced fallback initial generation
 */
export const generateFallbackInitial = (teamName: string, shortName?: string): string => {
  const displayName = getDisplayTeamName(teamName, shortName);
  
  // Handle special cases for better initials
  if (displayName.includes(' ')) {
    // Multi-word: take first letter of each word
    return displayName
      .split(' ')
      .map(word => word.charAt(0))
      .join('')
      .substring(0, 3)
      .toUpperCase();
  }
  
  // Single word: take first 2-3 characters
  return displayName.substring(0, 3).toUpperCase();
};
